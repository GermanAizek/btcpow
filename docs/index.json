{"repository_name":"","body":"# BTCPoW\n\nBitcoin style Proof of Work lib written in Crystal\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     btcpow:\n       github: cocol-project/btcpow\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"btcpow\"\n```\n\n#### Mining\n```\nBTCPoW.mine(difficulty: \"1d00ffff\", for: \"my_block_data\")\n```\n\n#### Calculate target based on difficulty bits\n```\nBTCPoW::Utils.calculate_target(from: \"1d00ffff\")\n```\n\n## Contributing\n\n1. Fork it (<https://github.com/cocol-project/btcpow/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Cristian È˜erb](https://github.com/cserb) - creator and maintainer\n","program":{"html_id":"/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"/BTCPoW","path":"BTCPoW.html","kind":"module","full_name":"BTCPoW","name":"BTCPoW","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"/BTCPoW","kind":"module","full_name":"BTCPoW","name":"BTCPoW"}],"subclasses":[],"including_types":[],"namespace":null,"doc":"A Bitcoin style Proof of Work library for Crystal\nMostly inspired by @aantonop's proof of work example\nhttps://github.com/bitcoinbook/bitcoinbook/blob/develop/code/proof-of-work-example.py","summary":"<p>A Bitcoin style Proof of Work library for Crystal Mostly inspired by @aantonop's proof of work example https://github.com/bitcoinbook/bitcoinbook/blob/develop/code/proof-of-work-example.py</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"mine(difficultynbits:String,forinput_data:InputData):Work-instance-method","html_id":"mine(difficultynbits:String,forinput_data:InputData):Work-instance-method","name":"mine","doc":"Returns the nonce and the hash found for the given data input and difficulty\n\n```\nBTCPoW.mine(difficulty: \"1d00ffff\", for: \"my_blockchain_data\")\n```","summary":"<p>Returns the nonce and the hash found for the given data input and difficulty</p>","abstract":false,"args":[{"name":"nbits","doc":null,"default_value":"","external_name":"difficulty","restriction":"String"},{"name":"input_data","doc":null,"default_value":"","external_name":"for","restriction":"InputData"}],"args_string":"(difficulty nbits : String, for input_data : InputData) : Work","source_link":null,"def":{"name":"mine","args":[{"name":"nbits","doc":null,"default_value":"","external_name":"difficulty","restriction":"String"},{"name":"input_data","doc":null,"default_value":"","external_name":"for","restriction":"InputData"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Work","visibility":"Public","body":"target = Utils.calculate_target(from: nbits)\n(0_u64..UInt64::MAX).each do |nonce|\n  hash = Utils.calculate_hash(nonce, data: input_data)\n  if (BigInt.new(hash, 16)) < target\n    return Work.new(nonce: nonce, hash: hash)\n  end\nend\nraise(\"Canary dead\")\n"}}],"macros":[],"types":[{"html_id":"/BTCPoW/BlockHash","path":"BTCPoW/BlockHash.html","kind":"alias","full_name":"BTCPoW::BlockHash","name":"BlockHash","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"","program":false,"enum":false,"alias":true,"aliased":"String","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"/BTCPoW","kind":"module","full_name":"BTCPoW","name":"BTCPoW"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"/BTCPoW/InputData","path":"BTCPoW/InputData.html","kind":"alias","full_name":"BTCPoW::InputData","name":"InputData","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"","program":false,"enum":false,"alias":true,"aliased":"String","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"/BTCPoW","kind":"module","full_name":"BTCPoW","name":"BTCPoW"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"/BTCPoW/Utils","path":"BTCPoW/Utils.html","kind":"module","full_name":"BTCPoW::Utils","name":"Utils","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"/BTCPoW/Utils","kind":"module","full_name":"BTCPoW::Utils","name":"Utils"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"/BTCPoW","kind":"module","full_name":"BTCPoW","name":"BTCPoW"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"calculate_hash(nonce:UInt64,data:String):BlockHash-instance-method","html_id":"calculate_hash(nonce:UInt64,data:String):BlockHash-instance-method","name":"calculate_hash","doc":"Returns the hash for `nonce` + `data`\n\n```\nBTCPoW::Utils.calculate_hash(nonce: 20151213_u64, data: \"cocol\") # => \"5906039dfa0262343155216f0d73135d30fd48a0d4543c61d27169db12736d3a\"\n```","summary":"<p>Returns the hash for <code>nonce</code> + <code>data</code></p>","abstract":false,"args":[{"name":"nonce","doc":null,"default_value":"","external_name":"nonce","restriction":"UInt64"},{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"String"}],"args_string":"(nonce : UInt64, data : String) : BlockHash","source_link":null,"def":{"name":"calculate_hash","args":[{"name":"nonce","doc":null,"default_value":"","external_name":"nonce","restriction":"UInt64"},{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BlockHash","visibility":"Public","body":"sha = OpenSSL::Digest.new(\"SHA256\")\nsha.update(\"#{nonce}#{data}\")\nsha.hexdigest\n"}},{"id":"calculate_target(fromnbits:String):BigInt-instance-method","html_id":"calculate_target(fromnbits:String):BigInt-instance-method","name":"calculate_target","doc":"Returns the numerical target threshold based on the given difficulty\n\nFind out more about it here\nhttps://github.com/bitcoinbook/bitcoinbook/blob/develop/ch10.asciidoc#target-representation\n\n```\nBTCPoW::Utils.calculate_target(from: \"1d00ffff\") # => 26959535291011309493156476344723991336010898738574164086137773096960\n```","summary":"<p>Returns the numerical target threshold based on the given difficulty</p>","abstract":false,"args":[{"name":"nbits","doc":null,"default_value":"","external_name":"from","restriction":"String"}],"args_string":"(from nbits : String) : BigInt","source_link":null,"def":{"name":"calculate_target","args":[{"name":"nbits","doc":null,"default_value":"","external_name":"from","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BigInt","visibility":"Public","body":"exponent = BigInt.new(nbits[0..1], 16)\ncoefficient = BigInt.new(nbits[2..7], 16)\ncoefficient * ((BigInt.new(2)) ** ((BigInt.new(8)) * (exponent - (BigInt.new(3)))))\n"}}],"macros":[],"types":[]},{"html_id":"/BTCPoW/Work","path":"BTCPoW/Work.html","kind":"struct","full_name":"BTCPoW::Work","name":"Work","abstract":false,"superclass":{"html_id":"/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"/BTCPoW","kind":"module","full_name":"BTCPoW","name":"BTCPoW"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(nonce:UInt64,hash:BlockHash)-class-method","html_id":"new(nonce:UInt64,hash:BlockHash)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"nonce","doc":null,"default_value":"","external_name":"nonce","restriction":"UInt64"},{"name":"hash","doc":null,"default_value":"","external_name":"hash","restriction":"BlockHash"}],"args_string":"(nonce : UInt64, hash : BlockHash)","source_link":null,"def":{"name":"new","args":[{"name":"nonce","doc":null,"default_value":"","external_name":"nonce","restriction":"UInt64"},{"name":"hash","doc":null,"default_value":"","external_name":"hash","restriction":"BlockHash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(nonce, hash)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Work.new(@nonce.clone, @hash.clone)"}},{"id":"copy_with(nonce_nonce=@nonce,hash_hash=@hash)-instance-method","html_id":"copy_with(nonce_nonce=@nonce,hash_hash=@hash)-instance-method","name":"copy_with","doc":null,"summary":null,"abstract":false,"args":[{"name":"_nonce","doc":null,"default_value":"@nonce","external_name":"nonce","restriction":""},{"name":"_hash","doc":null,"default_value":"@hash","external_name":"hash","restriction":""}],"args_string":"(nonce _nonce = @nonce, hash _hash = @hash)","source_link":null,"def":{"name":"copy_with","args":[{"name":"_nonce","doc":null,"default_value":"@nonce","external_name":"nonce","restriction":""},{"name":"_hash","doc":null,"default_value":"@hash","external_name":"hash","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Work.new(_nonce, _hash)"}},{"id":"hash:BlockHash-instance-method","html_id":"hash:BlockHash-instance-method","name":"hash","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BlockHash","source_link":null,"def":{"name":"hash","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BlockHash","visibility":"Public","body":"@hash"}},{"id":"nonce:UInt64-instance-method","html_id":"nonce:UInt64-instance-method","name":"nonce","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : UInt64","source_link":null,"def":{"name":"nonce","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt64","visibility":"Public","body":"@nonce"}}],"macros":[],"types":[]}]}]}}